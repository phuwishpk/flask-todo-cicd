name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # --- Job 1, 2, 3: Test, Build, และ Deploy to Render (เหมือนเดิมทุกอย่าง) ---
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: { python-version: '${{ env.PYTHON_VERSION }}', cache: 'pip' }
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: |
          pip install flake8
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --max-line-length=120 --statistics
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          FLASK_ENV: testing
        run: pytest --cov=app --cov-report=xml --cov-report=term
      - uses: codecov/codecov-action@v3
        with: { file: ./coverage.xml, fail_ci_if_error: false }

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions: { contents: read, packages: write }
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with: { registry: '${{ env.REGISTRY }}', username: '${{ github.actor }}', password: '${{ secrets.GITHUB_TOKEN }}' }
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: "type=ref,event=branch\ntype=sha,prefix={{branch}}-\ntype=raw,value=latest,enable={{is_default_branch}}"
      - uses: docker/build-push-action@v5
        with: { context: '.', push: true, tags: '${{ steps.meta.outputs.tags }}', labels: '${{ steps.meta.outputs.labels }}', cache-from: type=gha, cache-to: 'type=gha,mode=max' }

  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
      - run: sleep 60
      - name: Health check
        run: |
          for i in {1..5}; do
            if curl -f ${{ secrets.RENDER_APP_URL }}/api/health; then
              echo "Deployment successful!"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
          echo "Deployment health check failed"
          exit 1

  # --- Job 4: Verify Railway Deployment (วิธีใหม่ที่ง่ายกว่า) ---
  deploy-railway:
    name: Verify Railway Deployment
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for Railway Auto-Deploy
        run: |
          echo "Waiting 90 seconds for Railway to detect changes and start deploying..."
          sleep 90

      - name: Health Check Railway App
        run: |
          echo "Starting health checks on ${{ secrets.RAILWAY_APP_URL }}/api/health"
          for i in {1..8}; do
            if curl -f --max-time 10 "${{ secrets.RAILWAY_APP_URL }}/api/health"; then
              echo "✅ Railway deployment is healthy!"
              exit 0
            fi
            echo "Attempt $i failed. Retrying in 15 seconds..."
            sleep 15
          done
          echo "❌ Railway deployment health check failed after multiple attempts."
          exit 1
          